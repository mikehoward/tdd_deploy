#!/usr/bin/env ruby

require 'bundler/setup'
tdd_lib_path = File.expand_path('../../lib', __FILE__)
unless $:.include? tdd_lib_path
  $:.unshift tdd_lib_path
end
require 'tdd_deploy/environ'
# require 'curses'

class TddDeployEnv
  include TddDeploy::Environ

  attr_accessor :modified

  def show_env
    puts "============================================="
    self.env_types.keys.each do |k|
      v = self.send(k.to_sym)
      printf "%-20s: %s\n", k, v
    end
    if (self.web_hosts.nil? && self.db_hosts.nil?) || self.web_hosts == self.db_hosts
      printf "\n\nSpecial Key\n%-20s: %s\n", 'hosts', self.hosts, "set 'hosts' to set both web & db hosts"
    end
    puts "\nModified & Not Saved: #{self.modified.join(', ')}\n" if self.modified
    self.flash
    "(Env Key OR S[ave] to Save OR Q[uit] Quit + Save OR E[xit] to quit w/o Saving)\n? "
  end

  def modified?
    self.modified
  end
  
  def add_to_modified *args
    @modified ||= []
    @modified += args
  end
  
  def flash=(value)
    @flash ||= ''
    @flash += "#{value}\n"
  end
  
  def flash
    puts "\n#{@flash}\n\n" if @flash
    @flash = nil
  end
  
  def save
    if self.modified?
      self.flash = 'Updates Saved'
      self.save_env
    end
    self.modified = false
  end

  def parse_cmd(cmd)
    puts cmd
    unless cmd =~ /^\s*(\w+)(\s+.*?)\s*$/i
      self.flash = "unable to parse command: '#{cmd}'" unless cmd.strip.empty?
      return
    end
    
    key_prefix = $1
    param_value = $2.strip

    key_regx = Regexp.new('^' + key_prefix, Regexp::IGNORECASE)
    matching_keys = self.env_types.keys.select { |k| key_regx.match(k) }

    if matching_keys.size > 1 && matching_keys.include?(key_prefix)
      matching_keys = [key_prefix]
    end

    case matching_keys.size
    when 0
      if key_prefix == 'hosts'
        self.hosts = param_value
        self.flash = "Set hosts to '#{param_value}'"
        self.add_to_modified('hosts', 'web_hosts', 'db_hosts')
      else
        self.flash = "No environment variable matches #{key_prefix}"
      end
    when 1
      key = matching_keys.first
      self.send "#{key}=".to_sym, param_value
      self.add_to_modified(key)
      self.flash = "#{key} updated"
    else
      self.flash = "ambiguous match: #{matching_keys.join(', ')}"
    end
  end
end

tdd_deploy_env = TddDeployEnv.new

begin
  STDOUT.write tdd_deploy_env.show_env
  STDOUT.flush
  
  if STDIN.eof?
    STDERR.write "Unexpected End of Input - aborting"
    STDERR.write " - Discarded Unsaved Edits [#{tdd_deploy_env.modified.join(', ')}]" if tdd_deploy_env.modified?
    STDERR.write "\n"
    STDERR.flush
    break
  end
  cmd = STDIN.readline.strip
  puts cmd
  
  if cmd =~ /^q(uit)?$/i
    tdd_deploy_env.save
    tdd_deploy_env.flash = 'Quit Entered'
    break
  elsif cmd =~ /^s(ave)?$/i
    tdd_deploy_env.save
  elsif cmd =~ /^e(xit)?$/i
    tdd_deploy_env.flash = "Exit Entered"
    tdd_deploy_env.flash = "Discarded Edits [#{tdd_deploy_env.modified.join(', ')}]" if tdd_deploy_env.modified?
    break
  else
    tdd_deploy_env.parse_cmd(cmd)
  end
# rescue Exception => e
#   puts "Rescuing!!!!: #{e}"
#   exit 1
end until STDIN.closed?

tdd_deploy_env.flash
